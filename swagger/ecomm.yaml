openapi: 3.0.3
info:
  title: Swagger ECOMM - OpenAPI 3.0
  description: API Ecommerce - Alura NxtDev
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://localhost:3000

paths:
  /api/categories:
    get:
      tags:
        - Category
      summary: Get all categories
      description: Return all categories with id, name and status
      operationId: findCategories
      responses: 
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categories"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not Found"
  /api/categories/{id}:
    get:
      tags:
        - Category
      summary: Get one category
      description: Return the requested category with id, name and status. (request by id)
      operationId: findCategoryById
      parameters:
        - name: id
          in: path
          description: category's id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not Found"        
  /api/admin/categories:
    post:
      tags:
        - Category
      summary: Create one category
      description: Create a category in database
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCategory"
      responses:
        '201':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
  /api/admin/categories/update/{id}:
    put:
      tags:
        - Category
      summary: Update a category
      description: Update one or more category status
      operationId: updateCategory
      parameters:
        - name: id
          in: path
          description: category's id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCategory"
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
        '400':
          description: Bad Request
          content:
            application/json:
              example: "Bad Request"
  /api/admin/categories/remove/{id}:
    delete:
      tags:
        - Category
      summary: Remove a category
      description: Remove a category from the database
      operationId: deleteCategory
      parameters: 
        - name: id
          in: path
          description: category's id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
        '400':
          description: Bad Request
          content:
            application/json:
              example: "Bad Request"
  /api/admin/categories/active/{id}:
    put:
      tags:
        - Category
      summary: Active a category
      description: Activate an existing category
      operationId: activeCategory
      parameters:
        - name: id
          in: path
          description: category's id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        '200': 
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
        '400':
          description: Bad Request
          content:
            application/json:
              example: "Bad Request"      
  /api/products:
    get:
      tags:
        - Product
      summary: Get all products
      description: Return all products
      operationId: findProduts
      parameters:
        - name: id
          in: query
          description: category's id to filter
          required: false
          schema:
              oneOf:
                - type: string
                - type: integer
        - name: minStock
          in: query
          description: minimum stock units of a product
          required: false
          schema:
            type: integer
        - name: maxPrice
          in: query
          description: highest price of a product
          required: false
          schema:
            type: integer
        - name: minPrice
          in: query
          description: lowest price of a product
          required: false
          schema:
            type: integer
      responses: 
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/products"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not Found"
  /api/products/{id}:
    get:
      tags:
        - Product
      summary: Get one product
      description: Return the requested product. (request by id)
      operationId: findProductById
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not Found"     
  /api/admin/products:
    post:
      tags:
        - Product
      summary: Create one product
      description: Create a product in database
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createProduct"
      responses:
        '201':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
  /api/admin/products/update/{id}:
    put:
      tags:
        - Product
      summary: Update a product
      description: Update a product in database
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: product id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createProduct"
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        '404':  
          description: Not Found
          content:
            application/json:
              example: "Not found"
        '400':
          description: Bad Request
          content:
            application/json:
              example: "Bad Request"
  /api/admin/products/remove/{id}:
    delete:
      tags:
        - Product
      summary: Remove a product
      description: Remove a product from database
      operationId: deleteProduct
      parameters: 
        - name: id
          in: path
          description: product id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        '200': 
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
        '400':
          description: Bad Request
          content:
            application/json:
              example: "Bad Request"
  /api/admin/users:
    get:
      tags:
        - User
      summary: Get all users
      description: Return all users in database
      operationId: findUsers
      responses: 
        '200':  
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/users"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not Found"
    post:
      tags:
        - User
      summary: Create an user
      description: Create an user in database
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
      responses:
        '201':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
  /api/users/{id}:
    get:
      tags:
        - User
      summary: Get one user
      description: Return the requested USER. (request by id)
      operationId: findUserById
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not Found"     
  /api/admin/users/update/{id}:
    put:
      tags:
        - User
      summary: Update a user
      description: Update one or more information of a user in database
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
        '400':
          description: Bad Request
          content:
            application/json:
              example: "Bad Request"
  /api/admin/users/remove/{id}:
    delete:
      tags:
        - User
      summary: Remove an user
      description: Remove an user from the database
      operationId: deleteUser
      parameters: 
        - name: id
          in: path
          description: user id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        '200': 
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
        '400':
          description: Bad Request
          content:
            application/json:
              example: "Bad Request"
  /api/orders/{id}:
    get:
      tags:
        - Order
      summary: Get one order
      description: Return the requested order. (request by id)
      operationId: findOrderById
      parameters:
        - name: id
          in: path
          description: order id
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not Found"   
  /api/orders:
    post:
      tags:
        - Order
      summary: Create an order
      description: Create an order
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createOrder"
      responses:
        '201':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        '404':
          description: Not Found
          content:
            application/json:
              example: "Not found"
components:
  schemas:
    category:
      type: object
      properties:
        _id:
          oneOf:
            - type: string
            - type: integer
        nome:
          type: string
        status:
          type: string
    categories:
      type: array
      items:
        $ref: "#/components/schemas/category"
    createCategory:
      type: object
      properties:
        nome: 
          type: string
        status: 
          type: string
    product:
      type: object
      properties:
        _id:
          oneOf:
            - type: string
            - type: integer
        nome:
          type: string
        descricao:
          type: string
        slug:
          type: string
        preco:
          type: number
        estoque:
          type: integer
        categoria:
          type: string
    products:
      type: array
      items:
        $ref: "#/components/schemas/product"
    createProduct:
      type: object
      properties:
        nome:
          type: string
        descricao:
          type: string
        slug:
          type: string
        preco:
          type: number
        estoque:
          type: integer
        categoria:
          type: string
    user:
      type: object
      properties:
        _id:
          oneOf:
            - type: string
            - type: integer
        username:
          type: string
        email:
          type: string
        senha:
          type: string
        cpf:
          type: string
        telefone:
          type: string
        dataCriacao:
          type: string
        endereco:
          type: object
          properties:
            bairro:
              type: string
            rua:
              type: string
            numero:
              oneOf:
                - type: string
                - type: integer
            complemento:
              type: string
            cep:
              type: string
            cidade:
              type: string
            uf:
              type: string
    users: 
      type: array
      items:
        $ref: "#/components/schemas/user"
    createUser:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        senha:
          type: string
        cpf:
          type: string
        telefone:
          type: string
        endereco:
          type: object
          properties:
            bairro:
              type: string
            rua:
              type: string
            numero:
              oneOf:
                - type: string
                - type: integer
            complemento:
              type: string
            cep:
              type: string
            cidade:
              type: string
            uf:
              type: string
    order:
      type: object
      properties:
        _id:
          oneOf:
            - type: string
            - type: integer
        dataPedido:
          type: string
        account:
          type: object
          properties:
            accountId:
              oneOf:
                - type: string
                - type: integer
            nomeCliente: 
              type: string
        enderecoEntrega:
          type: object
          properties:
            bairro:
              type: string
            rua:
              type: string
            numero:
              oneOf:
                - type: string
                - type: integer
            complemento:
              type: string
            cep:
              type: string
            cidade:
              type: string
            uf:
              type: string
        itens: 
          type: array
          items: 
            type: object
            properties:
              productId:
                oneOf: 
                  - type: string
                  - type: integer
              quantidade:
                type: integer
              desconto:
                type: number
              precoUnitario:
                type: number
    createOrder:
      type: object
      properties:
        account:
          type: object
          properties:
            accountId:
              oneOf:
                - type: string
                - type: integer
            nomeCliente: 
              type: string
        enderecoEntrega:
          type: object
          properties:
            bairro:
              type: string
            rua:
              type: string
            numero:
              oneOf:
                - type: string
                - type: integer
            complemento:
              type: string
            cep:
              type: string
            cidade:
              type: string
            uf:
              type: string
        itens: 
          type: array
          items: 
            type: object
            properties:
              productId:
                oneOf: 
                  - type: string
                  - type: integer
              quantidade:
                type: integer
              desconto:
                type: number
              precoUnitario:
                type: number